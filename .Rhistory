#| label: applicant-personal-status
modifiedCredit_tbl %>%
filter(!is.na(personal_status)) %>%
group_by(personal_status) %>%
summarise(Freq = n()) %>%
mutate(Prop = Freq/sum(Freq)) %>%
ggplot(aes(x = 2, y = Prop, fill = reorder(personal_status, -Prop))) +
geom_bar(stat ="identity", width = 1, color = "white") +
xlim(0.3, 2.5) +
coord_polar(theta = "y",  start = 0) +
theme_void() +
scale_y_continuous(labels = scales::percent) +
labs(x = "",
y = "",
title = "Applicant personal status",
fill = "") +
geom_text_repel(aes(label = paste0(round(Prop*100,1),"%")), size = 3, position = position_stack(vjust = 0.7)) +
#scale_fill_brewer(palette = "Blues", direction = -1) +
theme(legend.position = "right")
#| label: data-split
#| warning: false
#| message: false
set.seed(1234)
credit_split <- initial_split(modifiedCredit_tbl,
prop = 0.75,
strata = "default")
crd_train <- credit_split %>%
training()
crd_test <- credit_split %>%
testing()
#| label: recipe-wkflw
#| warning: false
#| message: false
rec <- recipe(default ~ ., data = crd_train)
# Now add preprocessing steps to the recipe:
crd_signed <- rec %>%
#step_log(all_outcomes(), base = 10) %>%
step_impute_knn(all_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_spatialsign(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_other(all_nominal_predictors()) %>%
step_filter_missing(all_nominal_predictors(), threshold = 0) %>%
prep()
# step_zv(all_predictors(), skip = TRUE) %>%
crd_signed
#| label: resampling
#| warning: false
#| message: false
set.seed(1234)
folds <- vfold_cv(crd_train, v = 5, strata = default)
contrl_preds <- control_resamples(save_pred = TRUE, save_workflow = TRUE)
cltr_grid <- control_stack_grid()
metric = metric_set(accuracy, kap, roc_auc, sensitivity, specificity, recall, f_meas)
cltr_res <- control_stack_resamples()
#| label: lightgbm-model-spec
#| warning: false
#| message: false
# Lightgbm model specification
lightGBM_spec <-
boost_tree(
mode = "classification",
mtry = tune("mtry"),
trees = tune("trees"),
min_n = tune("min_n"),
tree_depth = tune("tree_depth"),
learn_rate = tune("learn_rate"),
loss_reduction = tune("loss_reduction"),
sample_size = tune("sample_size")
) %>%
set_engine("lightgbm")
lightGBM_wflow <-
workflow() %>%
add_model(lightGBM_spec) %>%
add_recipe(crd_signed)
lightGBM_wflow
set.seed(1234)
lightGBM_res <-
tune_grid(
lightGBM_wflow,
resamples = folds,
metrics = metric,
grid = 4,
control = cltr_grid
)
lightGBM_res
#| label: knn-model-spec
#| warning: false
#| message: false
# knn model specification
knn_spec <-
nearest_neighbor(
mode = "classification",
neighbors = tune("k")
) %>%
set_engine("kknn")
## knn specification
knn_wflow <-
workflow() %>%
add_model(knn_spec) %>%
add_recipe(crd_signed)
knn_wflow
set.seed(1234)
knn_res <-
tune_grid(
knn_wflow,
resamples = folds,
metrics = metric,
grid = 4,
control = cltr_grid
)
knn_res
#| label: xgboost-model-spec
#| warning: false
#| message: false
# xgboost model specification
xgb_spec <-
boost_tree(
mtry = tune("mtry"),
trees = tune("trees"),
min_n = tune("min_n"),
tree_depth = tune("tree_depth"),
learn_rate = tune("learn_rate"),
loss_reduction = tune("loss_reduction")
) %>%
set_engine("xgboost") %>%
set_mode("classification") %>%
translate()
xgb_wflow <-
workflow() %>%
add_model(xgb_spec) %>%
add_recipe(crd_signed)
set.seed(1234)
xgb_res <-
tune_grid(
xgb_wflow,
resamples = folds,
grid = 6,
metrics = metric,
control = cltr_grid
)
xgb_res
#| label: rf-model-spec
#| warning: false
#| message: false
# Random Forest model specification
rf_mod <- rand_forest(trees = tune(),
min_n = tune()) %>%
set_mode("classification") %>%
set_engine("ranger", importance='impurity')
## tune_rf_model
rf_grid <- dials::parameters(rf_mod) %>% grid_random(size = 5)
# setup workflow
rf_trip_wflow <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(crd_signed)
rf_trip_wflow
## hyper-parameter tuning with cross validation
# train, test, and evaluate model performance
set.seed(1234)
rf_res <-
rf_trip_wflow %>%
tune_grid(resamples = folds,
grid = 6,
metrics = metric,
control = cltr_grid)
rf_res
#| label: stack-members
#| warning: false
#| message: false
tic("start stack models")
stacked_models <-
stacks() %>%
add_candidates(knn_res) %>%
add_candidates(xgb_res) %>%
add_candidates(rf_res) %>%
add_candidates(lightGBM_res)
stacked_models %>% as_tibble()
toc()
#| label: blend-stacks
#| warning: false
#| message: false
tic("Fit the stack models")
fit_stacked_models <-
stacked_models %>%
blend_predictions()
toc()
#| label: plots
#| warning: false
#| message: false
theme_set(theme_bw())
autoplot(fit_stacked_models)
autoplot(fit_stacked_models, type = "members")
#| label: autoplot
#| warning: false
#| message: false
autoplot(fit_stacked_models, type = "weights")
#| label: fit-stacked
#| warning: false
#| message: false
tic("fit the model members")
fit_stacked_models<-
fit_stacked_models %>%
fit_members()
toc()
#| label: knn_res
#| warning: false
#| messsage: false
collect_parameters(fit_stacked_models, "knn_res")
#| label: xgb_res
#| warning: false
#| messsage: false
collect_parameters(fit_stacked_models, "xgb_res")
#| label: lightGBM_res
#| warning: false
#| messsage: false
collect_parameters(fit_stacked_models, "lightGBM_res")
#| label: rf_res
#| warning: false
#| messsage: false
collect_parameters(fit_stacked_models, "rf_res")
#| label: predict-stacked-models
#| warning: false
#| messsage: false
test_df <-
crd_test %>%
bind_cols(predict(fit_stacked_models, .))
test_df
#| label: compare-members
#| warning: false
#| messsage: false
member_preds <-
test_df %>%
select(default) %>%
bind_cols(predict(fit_stacked_models, test_df, members = TRUE)) %>%
rename(stackedModels = `.pred_class`)
member_preds
#| label: rmse-comparison
#| warning: false
#| messsage: false
map_dfr(member_preds, sensitivity, truth = default, data = member_preds) %>%
mutate(member = colnames(member_preds))
#| label: r2-comparison
#| warning: false
#| messsage: false
map_dfr(member_preds, f_meas, truth = default, data = member_preds) %>%
mutate(member = colnames(member_preds))
#| label: accuracy
#| warning: false
#| messsage: false
map_dfr(member_preds, accuracy, truth = default, data = member_preds) %>%
mutate(member = colnames(member_preds))
#| label: recall
#| warning: false
#| messsage: false
map_dfr(member_preds, recall, truth = default, data = member_preds) %>%
mutate(member = colnames(member_preds))
#| label: explainer
#| message: false
#| warning: false
explain_stack <- explain_tidymodels(fit_stacked_models,
data = crd_test %>% select(-default),
y = crd_test$default,
verbose = FALSE, label ="Stack Model") %>%
model_parts()
#| label: explainer
#| message: false
#| warning: false
explain_stack <- explain_tidymodels(fit_stacked_models,
data = crd_test %>% select(-default),
y = as.character(crd_test$default),
verbose = FALSE, label ="Stack Model") %>%
model_parts()
#| label: explainer
#| message: false
#| warning: false
explain_stack <- explain_tidymodels(fit_stacked_models,
data = crd_test %>% select(-default),
y = crd_test$default,
verbose = FALSE, label ="Stack Model") %>%
model_parts()
install.packages("beans")
library(beans)
glimpse(beans)
crd_test <- crd_test %>% bake()
crd_test <- crd_test %>% bake(crd_signed, new_data = .)
class(crd_test)
#| label: predict-stacked-models
#| warning: false
#| messsage: false
test_df <-
crd_test %>%
bind_cols(predict(fit_stacked_models, .))
names(crd_test)
#| label: data-split
#| warning: false
#| message: false
set.seed(1234)
credit_split <- initial_split(modifiedCredit_tbl,
prop = 0.75,
strata = "default")
crd_train <- credit_split %>%
training()
crd_test <- credit_split %>%
testing()
#| label: recipe-wkflw
#| warning: false
#| message: false
rec <- recipe(default ~ ., data = crd_train)
# Now add preprocessing steps to the recipe:
crd_signed <- rec %>%
#step_log(all_outcomes(), base = 10) %>%
step_impute_knn(all_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_spatialsign(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_other(all_nominal_predictors()) %>%
step_filter_missing(all_nominal_predictors(), threshold = 0) %>%
prep()
# step_zv(all_predictors(), skip = TRUE) %>%
crd_signed
install.packages("baguette")
#| label: data-split
#| warning: false
#| message: false
set.seed(1601)
credit_split <- initial_split(modifiedCredit_tbl,
prop = 0.75,
strata = default)
crd_train <- credit_split %>%
training()
crd_test <- credit_split %>%
testing()
set.seed(1602)
crd_val <- validation_split(crd_train, strata = default, prop = 4/5)
crd_val$splits[[1]]
glimpse(beans)
install.packages("bestNormalize")
pacman::p_load(
tidyverse,
scales,
ggrepel,
skimr,
tidymodels,
stacks,
magrittr,
tictoc,
bonsai,
lightgbm,
DALEX,
DALEXtra,
patchwork,
bestNormalize
)
crd_rec <- recipe(default ~ .,
data = analysis(crd_val$splits[[1]])) %>%
# Now add preprocessing steps to the recipe:
step_impute_knn(all_predictors()) %>%
step_zv(all_numeric_predictors()) %>%
step_orderNorm(all_numeric_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_spatialsign(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_other(all_nominal_predictors()) %>%
step_filter_missing(all_nominal_predictors(), threshold = 0)
crd_rec_trained <-
crd_rec %>%
prep()
crd_rec_trained
crd_rec_trained
crd_rec_trained <-
crd_rec %>%
prep(log_changes = TRUE)
crd_rec_trained
#| label: baking
#| warning: false
#| message: false
crd_validation <- crd_val$splits %>% pluck(1) %>% assessment()
crd_val_processed <- bake(crd_rec_trained, new_data = crd_validation)
View(modifiedCredit_tbl)
#| label: compare-original-vs-processed-data
#| warning: false
#| message: false
p1 <-
crd_validation %>%
ggplot(aes(x = amount)) +
geom_histogram(bins = 30, color = "white", fill = "blue", alpha = 1/3) +
ggtitle("Original validation set data")
p2 <-
crd_val_processed %>%
ggplot(aes(x = amount)) +
geom_histogram(bins = 30, color = "white", fill = "red", alpha = 1/3) +
ggtitle("Processed validation set data")
p1 + p2
plot_validation_results <- function(recipe, dat = assessment(crd_val$splits[[1]])){
set.seed(1)
plot_area <-
recipe %>%
prep() %>%
bake(new_data = dat, all_predictors(), all_outcomes()) %>%
sample_n(250)
nms <- names(plot_area)
x_name <- sym(nms[1])
y_name <- sym(nms[2])
plot_data %>%
ggplot(aes(x = !!x_name, y = !!y_name, col = default,
fill = default, pch = default)) +
geom_point(alpha =0.9) +
scale_shape_manual(values = 1:2) +
coord_obs_pred() +
theme_bw()
}
crd_rec_trained %>%
step_pca(all_numeric_predictors(), num_comp = 4) %>%
plot_validation_results() +
ggtitle("Principal Component Analysis")
plot_validation_results <- function(recipe, dat = assessment(crd_val$splits[[1]])){
set.seed(1)
plot_area <-
recipe %>%
prep() %>%
bake(new_data = dat, all_predictors(), all_outcomes()) %>%
sample_n(120)
nms <- names(plot_area)
x_name <- sym(nms[1])
y_name <- sym(nms[2])
plot_data %>%
ggplot(aes(x = !!x_name, y = !!y_name, col = default,
fill = default, pch = default)) +
geom_point(alpha =0.9) +
scale_shape_manual(values = 1:2) +
coord_obs_pred() +
theme_bw()
}
crd_rec_trained %>%
step_pca(all_numeric_predictors(), num_comp = 4) %>%
plot_validation_results() +
ggtitle("Principal Component Analysis")
plot_validation_results <- function(recipe, dat = assessment(crd_val$splits[[1]])){
set.seed(1)
plot_area <-
recipe %>%
prep() %>%
bake(new_data = dat, all_predictors(), all_outcomes()) %>%
sample_n(120)
nms <- names(plot_area)
x_name <- sym(nms[1])
y_name <- sym(nms[2])
plot_data %>%
ggplot(aes(x = !!x_name, y = !!y_name, col = default,
fill = default, pch = default)) +
geom_point(alpha =0.9) +
scale_shape_manual(values = 1:2) +
coord_obs_pred() +
theme_bw()
}
crd_rec_trained %>%
step_pca(all_numeric_predictors(), num_comp = 4) %>%
plot_validation_results() +
ggtitle("Principal Component Analysis")
plot_validation_results <- function(recipe, dat = assessment(crd_val$splits[[1]])){
set.seed(1)
plot_data <-
recipe %>%
prep() %>%
bake(new_data = dat, all_predictors(), all_outcomes()) %>%
sample_n(120)
nms <- names(plot_area)
x_name <- sym(nms[1])
y_name <- sym(nms[2])
plot_data %>%
ggplot(aes(x = !!x_name, y = !!y_name, col = default,
fill = default, pch = default)) +
geom_point(alpha =0.9) +
scale_shape_manual(values = 1:2) +
coord_obs_pred() +
theme_bw()
}
crd_rec_trained %>%
step_pca(all_numeric_predictors(), num_comp = 4) %>%
plot_validation_results() +
ggtitle("Principal Component Analysis")
plot_validation_results <- function(recipe, dat = assessment(crd_val$splits[[1]])){
set.seed(1)
plot_data <-
recipe %>%
prep() %>%
bake(new_data = dat, all_predictors(), all_outcomes()) %>%
sample_n(120)
nms <- names(plot_data)
x_name <- sym(nms[1])
y_name <- sym(nms[2])
plot_data %>%
ggplot(aes(x = !!x_name, y = !!y_name, col = default,
fill = default, pch = default)) +
geom_point(alpha =0.9) +
scale_shape_manual(values = 1:2) +
coord_obs_pred() +
theme_bw()
}
crd_rec_trained %>%
step_pca(all_numeric_predictors(), num_comp = 4) %>%
plot_validation_results() +
ggtitle("Principal Component Analysis")
install.packages("learntidymodels")
devtools::install_github("tidymodels/learntidymodels")
install.packages("embed")
install.packages("embed")
install.packages("embed")
install.packages("embed")
sessionInfo()
??plot_top_loadings
