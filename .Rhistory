#| warning: false
#| message: false
best_res <-
crd_res %>%
extract_workflow("pls_mlp") %>%
finalize_workflow(
crd_res %>%
extract_workflow_set_result("pls_mlp") %>%
select_best(metric = "roc_auc")
) %>%
last_fit(split = credit_split, metrics = metric_set(roc_auc))
best_wflow_fit <- best_res$.workflow[[1]]
extract_fit_engine(best_wflow_fit)
#| label: performance-on-test-data
#| warning: false
#| message: false
collect_metrics(mlp_res)
#| label: performance-on-test-data
#| warning: false
#| message: false
collect_metrics(best_res)
?conf_mat
class(best_wflow_fit)
mlp <- best_wflow_fit %>% fit(crd_train) %>% predict(crd_test) %>% bind_cols(crd_test)
names(mlp)
mlp %>% conf_mat(truth = default, estimate = .pred_class) %>%
summary()
mlp %>% conf_mat(truth = default, estimate = .pred_class) %>% autoplot(type = "heatmap")
#| label: explainer
#| message: false
#| warning: false
#| eval: true
explain_stack <- DALEXtra::explain_tidymodels(best_wflow_fit,
data = crd_test %>% select(-default),
y = as.numeric(crd_test$default),
verbose = FALSE, label ="model-name-here")
#| label: ggplot_imp_function
#| warning: false
#| message: false
#| eval: true
ggplot_imp <- function(...) {
obj <- list(...)
metric_name <- attr(obj[[1]], "loss_name")
metric_lab <- paste(metric_name,
"after permutations\n(higher indicates more important)")
full_vip <- bind_rows(obj) %>%
filter(variable != "_baseline_")
perm_vals <- full_vip %>%
filter(variable == "_full_model_") %>%
group_by(label) %>%
summarise(dropout_loss = mean(dropout_loss))
p <- full_vip %>%
filter(variable != "_full_model_") %>%
mutate(variable = fct_reorder(variable, dropout_loss)) %>%
ggplot(aes(dropout_loss, variable))
if(length(obj) > 1) {
p <- p +
facet_wrap(vars(label)) +
geom_vline(data = perm_vals, aes(xintercept = dropout_loss, color = label),
size = 1.4, lty = 2, alpha = 0.7) +
geom_boxplot(aes(color = label, fill = label), alpha = 0.2)
} else {
p <- p +
geom_vline(data = perm_vals, aes(xintercept = dropout_loss),
linewidth = 1.4, lty = 2, alpha = 0.7) +
geom_boxplot(fill = "#91CBD765", alpha = 0.4)
}
p +
theme(legend.position = "none") +
labs(x = metric_lab,
y = NULL,  fill = NULL,  color = NULL)
}
#| fig-cap: Global explainer for the classification ML tidymodel on the credit data
#| fig-width: 9
#| fig-height: 7
#| label: var-imp-plot
#| message: false
#| warning: false
#| eval: true
set.seed(1234)
explain_stack %>%
model_parts() %>%
ggplot_imp()
extract_fit_parsnip(best_wflow_fit)
extract_fit_engine(best_wflow_fit)
#| label: roc-curve-auc-estimate
#| warning: false
#| message: false
#| comment: ""
prob_preds <- best_wflow_fit %>%
fit(crd_train) %>%
predict(crd_test, type = "prob") %>%
bind_cols(crd_test)
threshold_df <- prob_preds %>%
roc_curve(truth = default, estimate = `.pred_yes`)
threshold_df %>%
autoplot()
roc_auc(prob_preds, truth = default, estimate = `.pred_yes`)
#| label: roc-curve-auc-estimate
#| warning: false
#| message: false
#| comment: ""
prob_preds <- best_wflow_fit %>%
fit(crd_train) %>%
predict(crd_test, type = "prob") %>%
bind_cols(crd_test)
threshold_df <- prob_preds %>%
roc_curve(truth = default, estimate = `.pred_no`)
threshold_df %>%
autoplot()
roc_auc(prob_preds, truth = default, estimate = `.pred_no`)
#| label: resampling
#| warning: false
#| message: false
cltr <- control_grid(parallel_over = "everything")
crd_res <-
workflow_set(
preproc = list(basic = default ~ ., pls = pls_rec, umap = umap_rec),
models = list(bag = bagging_spec,
mlp = mlp_spec)
) %>%
workflow_map(
verbose = TRUE,
seed = 1603,
resamples = crd_val,
grid = 3,
metrics = metric_set(roc_auc, accuracy, specificity, sensitivity),
control = cltr
)
#| label: model-ranking
#| warning: false
#| message: false
rankings <-
rank_results(crd_res, select_best = TRUE) %>%
mutate(method = map_chr(wflow_id, ~str_split(.x, "_", simplify = TRUE)[1]))
tidymodels_prefer()
rankings %>% filter(length(rank) > 0) %>% dplyr::select(rank, mean, model, method)
#| label: final-model
#| warning: false
#| message: false
best_res <-
crd_res %>%
extract_workflow("pls_mlp") %>%
finalize_workflow(
crd_res %>%
extract_workflow_set_result("pls_mlp") %>%
select_best(metric = "roc_auc")
) %>%
last_fit(split = credit_split, metrics = metric_set(roc_auc))
best_wflow_fit <- best_res$.workflow[[1]]
extract_fit_parsnip(best_wflow_fit)
#| label: performance-on-test-data
#| warning: false
#| message: false
collect_metrics(best_res)
rankings
#| label: resampling
#| warning: false
#| message: false
cltr <- control_grid(parallel_over = "everything")
crd_res <-
workflow_set(
preproc = list(basic = default ~ ., pls = pls_rec, umap = umap_rec),
models = list(bag = bagging_spec,
mlp = mlp_spec)
) %>%
workflow_map(
verbose = TRUE,
seed = 1603,
resamples = crd_val,
grid = 3,
metrics = metric_set(specificity),
control = cltr
)
#| label: model-ranking
#| warning: false
#| message: false
rankings <-
rank_results(crd_res, select_best = TRUE) %>%
mutate(method = map_chr(wflow_id, ~str_split(.x, "_", simplify = TRUE)[1]))
tidymodels_prefer()
rankings %>% filter(length(rank) > 0) %>% dplyr::select(rank, mean, model, method)
#| label: final-model
#| warning: false
#| message: false
best_res <-
crd_res %>%
extract_workflow("basic_bag") %>%
finalize_workflow(
crd_res %>%
extract_workflow_set_result("basic_bag") %>%
select_best(metric = "specificity")
) %>%
last_fit(split = credit_split, metrics = metric_set(roc_auc))
best_wflow_fit <- best_res$.workflow[[1]]
extract_fit_parsnip(best_wflow_fit)
#| label: performance-on-test-data
#| warning: false
#| message: false
collect_metrics(best_res)
#| label: final-model
#| warning: false
#| message: false
best_res <-
crd_res %>%
extract_workflow("basic_bag") %>%
finalize_workflow(
crd_res %>%
extract_workflow_set_result("basic_bag") %>%
select_best(metric = "specificity")
) %>%
last_fit(split = credit_split, metrics = metric_set(specificity))
best_wflow_fit <- best_res$.workflow[[1]]
extract_fit_parsnip(best_wflow_fit)
#| label: resampling
#| warning: false
#| message: false
cltr <- control_grid(parallel_over = "everything")
crd_res <-
workflow_set(
preproc = list(basic = default ~ ., pls = pls_rec, umap = umap_rec),
models = list(bag = bagging_spec,
mlp = mlp_spec)
) %>%
workflow_map(
verbose = TRUE,
seed = 1603,
resamples = crd_val,
grid = 3,
metrics = metric_set(roc_auc),
control = cltr
)
#| label: model-ranking
#| warning: false
#| message: false
rankings <-
rank_results(crd_res, select_best = TRUE) %>%
mutate(method = map_chr(wflow_id, ~str_split(.x, "_", simplify = TRUE)[1]))
tidymodels_prefer()
rankings %>% filter(length(rank) > 0) %>% dplyr::select(rank, mean, model, method)
#| label: final-model
#| warning: false
#| message: false
best_res <-
crd_res %>%
extract_workflow("basic_bag") %>%
finalize_workflow(
crd_res %>%
extract_workflow_set_result("basic_bag") %>%
select_best(metric = "roc_auc")
) %>%
last_fit(split = credit_split, metrics = metric_set(roc_auc))
best_wflow_fit <- best_res$.workflow[[1]]
extract_fit_parsnip(best_wflow_fit)
#| label: performance-on-test-data
#| warning: false
#| message: false
collect_metrics(best_res)
#| label: final-model
#| warning: false
#| message: false
best_res <-
crd_res %>%
extract_workflow("pls_mlp") %>%
finalize_workflow(
crd_res %>%
extract_workflow_set_result("pls_mlp") %>%
select_best(metric = "roc_auc")
) %>%
last_fit(split = credit_split, metrics = metric_set(roc_auc))
best_wflow_fit <- best_res$.workflow[[1]]
extract_fit_parsnip(best_wflow_fit)
#| label: performance-on-test-data
#| warning: false
#| message: false
collect_metrics(best_res)
#| label: resampling
#| warning: false
#| message: false
cltr <- control_grid(parallel_over = "everything")
crd_res <-
workflow_set(
preproc = list(basic = default ~ ., pls = pls_rec, umap = umap_rec),
models = list(bag = bagging_spec,
mlp = mlp_spec)
) %>%
workflow_map(
verbose = TRUE,
seed = 1603,
resamples = crd_val,
grid = 3,
metrics = metric_set(roc_auc),
control = cltr
)
#| label: model-ranking
#| warning: false
#| message: false
rankings <-
rank_results(crd_res, select_best = TRUE) %>%
mutate(method = map_chr(wflow_id, ~str_split(.x, "_", simplify = TRUE)[1]))
tidymodels_prefer()
rankings %>% filter(length(rank) > 0) %>% dplyr::select(rank, mean, model, method)
#| label: final-model
#| warning: false
#| message: false
#| error: true
best_res <-
crd_res %>%
extract_workflow("pls_mlp") %>%
finalize_workflow(
crd_res %>%
extract_workflow_set_result("pls_mlp") %>%
select_best(metric = "roc_auc")
) %>%
last_fit(split = credit_split, metrics = metric_set(roc_auc))
best_wflow_fit <- best_res$.workflow[[1]]
extract_fit_parsnip(best_wflow_fit)
#| label: performance-on-test-data
#| warning: false
#| message: false
collect_metrics(best_res)
#| warning: false
#| message: false
#| label: load-package
#| echo: false
if(!require(pacman))
install.packages("pacman")
pacman::p_load(
tidyverse,
scales,
ggrepel,
skimr,
tidymodels,
stacks,
magrittr,
tictoc,
bonsai,
lightgbm,
DALEX,
DALEXtra,
patchwork,
bestNormalize,
embed,
learntidymodels,
baguette,
discrim,
plotly
)
options(scipen = 999, digits = 2)
tidymodels_prefer()
#| warning: false
#| message: false
#| label: default-proportion
#| echo: false
modifiedCredit_tbl %>%
group_by(default) %>%
summarise(Freq = n()) %>%
mutate(Prop = Freq/sum(Freq)) %>%
ggplot(aes(x = 2, y = Prop, fill = reorder(default, -Prop))) +
geom_bar(stat ="identity", width = 1, color = "white") +
xlim(0.3, 2.5) +
coord_polar(theta = "y",  start = 0) +
theme_void() +
scale_y_continuous(labels = scales::percent) +
labs(x = "",
y = "",
title = "Historical loan default status",
fill = "Loan defaulted?") +
geom_text_repel(aes(label = paste0(round(Prop*100,1),"%")), size = 3, position = position_stack(vjust = 0.7)) +
#scale_fill_brewer(palette = "Blues", direction = -1) +
theme(legend.position = "right") +
ggplotly()
?ggplotly
#| warning: false
#| message: false
#| label: default-proportion
#| echo: false
loan_default <-  modifiedCredit_tbl %>%
group_by(default) %>%
summarise(Freq = n()) %>%
mutate(Prop = Freq/sum(Freq)) %>%
ggplot(aes(x = 2, y = Prop, fill = reorder(default, -Prop))) +
geom_bar(stat ="identity", width = 1, color = "white") +
xlim(0.3, 2.5) +
coord_polar(theta = "y",  start = 0) +
theme_void() +
scale_y_continuous(labels = scales::percent) +
labs(x = "",
y = "",
title = "",
fill = "Loan defaulted?") +
geom_text_repel(aes(label = paste0(round(Prop*100,1),"%")), size = 3, position = position_stack(vjust = 0.7)) +
#scale_fill_brewer(palette = "Blues", direction = -1) +
theme(legend.position = "right")
ggplotly(loan_default)
plotly::ggplotly(loan_default)
loan_default <-  modifiedCredit_tbl %>%
group_by(default) %>%
summarise(Freq = n()) %>%
mutate(Prop = Freq/sum(Freq)) %>%
ggplot(aes(x = 2, y = Prop, fill = reorder(default, -Prop))) +
geom_bar(stat ="identity", width = 1, color = "white") +
xlim(0.3, 2.5) +
coord_polar(theta = "y",  start = 0) +
theme_void() +
scale_y_continuous(labels = scales::percent) +
labs(x = "",
y = "",
title = "",
fill = "Loan defaulted?") +
geom_text_repel(aes(label = paste0(round(Prop*100,1),"%")), size = 3, position = position_stack(vjust = 0.7)) +
#scale_fill_brewer(palette = "Blues", direction = -1) +
theme(legend.position = "right")
loan_default
plotly::ggplotly(loan_default)
ggpenguins <- qplot(bill_length_mm , body_mass_g,
data = palmerpenguins::penguins, color = species)
data(canada.cities, package = "maps")
viz <- ggplot(canada.cities, aes(long, lat)) +
borders(regions = "canada") +
coord_equal() +
geom_point(aes(text = name, size = pop), colour = "red", alpha = 1/2)
ggplotly(viz, tooltip = c("text", "size"))
data(canada.cities, package = "maps")
install.packages("palmerpenguins")
install.packages("maps")
ggpenguins <- qplot(bill_length_mm , body_mass_g,
data = palmerpenguins::penguins, color = species)
ggplotly(ggpenguins)
data(canada.cities, package = "maps")
viz <- ggplot(canada.cities, aes(long, lat)) +
borders(regions = "canada") +
coord_equal() +
geom_point(aes(text = name, size = pop), colour = "red", alpha = 1/2)
ggplotly(viz, tooltip = c("text", "size"))
loan_default <-  modifiedCredit_tbl %>%
group_by(default) %>%
summarise(Freq = n()) %>%
mutate(Prop = Freq/sum(Freq)) %>%
ggplot(aes(x = 2, y = Prop, fill = reorder(default, -Prop))) +
geom_bar(stat ="identity", width = 1, color = "white") +
xlim(0.3, 2.5) +
coord_polar(theta = "y",  start = 0) +
theme_void() +
scale_y_continuous(labels = scales::percent) +
labs(x = "",
y = "",
title = "",
fill = "Loan defaulted?") +
geom_text_repel(aes(label = paste0(round(Prop*100,1),"%")), size = 3, position = position_stack(vjust = 0.7)) +
#scale_fill_brewer(palette = "Blues", direction = -1) +
theme(legend.position = "right")
plotly::ggplotly(loan_default)
pacman::p_load(
tidyverse,
scales,
ggrepel,
skimr,
tidymodels,
stacks,
magrittr,
tictoc,
bonsai,
lightgbm,
DALEX,
DALEXtra,
patchwork,
bestNormalize,
embed,
learntidymodels,
baguette,
discrim,
DT
)
#| label: model-ranking
#| warning: false
#| message: false
#| echo: false
rankings <-
rank_results(crd_res, select_best = TRUE) %>%
mutate(method = map_chr(wflow_id, ~str_split(.x, "_", simplify = TRUE)[1]))
tidymodels_prefer()
rankings %>% filter(length(rank) > 0) %>% dplyr::select(rank, mean, model, method)
#| warning: false
#| message: false
#| label: load-packages
# Install pacman package if needed
if(!require("pacman")) install.packages("pacman")
# load the required packages
pacman::p_load(
httr,
jsonlite,
tidyjson,
tidyverse,
lubridate,
anytime,
tictoc,
magrittr,
janitor,
arrow
)
tic()
credit_bureau <- list.files(".",
pattern = "*.json",
full.names = TRUE,
include.dirs = TRUE) %>%
map_df(~jsonlite::fromJSON(paste(readLines(.), collapse=""), flatten = TRUE))
toc()
credit_bureau
View(credit_bureau)
View(credit_bureau$data.consumerfullcredit.accountmonthlypaymenthistory)
View(credit_bureau[[2]][[1]])
